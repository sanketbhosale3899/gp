using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Microsoft.DirectX;
using Microsoft.DirectX.Direct3D;

namespace texture
{
    public partial class Form1 : Form
    {
        Device d;
        CustomVertex.PositionTextured[] v = new CustomVertex.PositionTextured[3];
        Texture t;

        public Form1()
        {
            InitializeComponent();
            IniteGraphics();
        }
        public void IniteGraphics()
        {
            PresentParameters p = new PresentParameters();
            p.Windowed = true;
            p.SwapEffect = SwapEffect.Discard;
            d = new Device(0, DeviceType.Hardware, this, CreateFlags.HardwareVertexProcessing, p);
            d.Transform.Projection = Matrix.PerspectiveFovLH(3.14f / 4, d.Viewport.Width / d.Viewport.Height, 1.0f, 200f);

            d.Transform.View = Matrix.LookAtLH(new Vector3(0, 0, 40), new Vector3(0, 0, 0), new Vector3(0, 2, 0));

            d.RenderState.Lighting = false;
            d.RenderState.CullMode = Cull.None;
        }
        private void Form1_Paint(object sender, PaintEventArgs e)
        {
            v[0] = new CustomVertex.PositionTextured(new Vector3(0, 0, 0), 0, 0);
            v[1] = new CustomVertex.PositionTextured(new Vector3(2, 15, 0), 0, 1);
            v[2] = new CustomVertex.PositionTextured(new Vector3(15, 2, 0), 1, 0);
            t = new Texture(d, new Bitmap("E:\\pic\\Desert.jpg"), 0, Pool.Managed);
            d.Clear(ClearFlags.Target, Color.PeachPuff, 0, 1);
            d.BeginScene();
            d.SetTexture(0, t);
            d.VertexFormat = CustomVertex.PositionTextured.Format;
            d.DrawUserPrimitives(PrimitiveType.TriangleList, 1, v);
            d.EndScene();
            d.Present();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
        }
    }
}

